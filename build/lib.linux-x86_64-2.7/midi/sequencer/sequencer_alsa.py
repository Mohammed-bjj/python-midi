# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sequencer_alsa
else:
    import _sequencer_alsa

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def open_client(name, type, stream, mode):
    return _sequencer_alsa.open_client(name, type, stream, mode)

def new_port_subscribe():
    return _sequencer_alsa.new_port_subscribe()

def new_queue_status(handle, queue):
    return _sequencer_alsa.new_queue_status(handle, queue)

def free_queue_status(qstatus):
    return _sequencer_alsa.free_queue_status(qstatus)

def new_port_info():
    return _sequencer_alsa.new_port_info()

def new_client_info():
    return _sequencer_alsa.new_client_info()

def event_input(handle):
    return _sequencer_alsa.event_input(handle)

def snd_seq_control_queue_eventless(handle, queue, type, value):
    return _sequencer_alsa.snd_seq_control_queue_eventless(handle, queue, type, value)

def init_queue_tempo(handle, queue, bpm, ppq):
    return _sequencer_alsa.init_queue_tempo(handle, queue, bpm, ppq)

def client_poll_descriptors(handle):
    return _sequencer_alsa.client_poll_descriptors(handle)
SND_SEQ_OPEN_OUTPUT = _sequencer_alsa.SND_SEQ_OPEN_OUTPUT
SND_SEQ_OPEN_INPUT = _sequencer_alsa.SND_SEQ_OPEN_INPUT
SND_SEQ_OPEN_DUPLEX = _sequencer_alsa.SND_SEQ_OPEN_DUPLEX
SND_SEQ_NONBLOCK = _sequencer_alsa.SND_SEQ_NONBLOCK
SND_SEQ_TYPE_HW = _sequencer_alsa.SND_SEQ_TYPE_HW
SND_SEQ_TYPE_SHM = _sequencer_alsa.SND_SEQ_TYPE_SHM
SND_SEQ_TYPE_INET = _sequencer_alsa.SND_SEQ_TYPE_INET
SND_SEQ_ADDRESS_UNKNOWN = _sequencer_alsa.SND_SEQ_ADDRESS_UNKNOWN
SND_SEQ_ADDRESS_SUBSCRIBERS = _sequencer_alsa.SND_SEQ_ADDRESS_SUBSCRIBERS
SND_SEQ_ADDRESS_BROADCAST = _sequencer_alsa.SND_SEQ_ADDRESS_BROADCAST
SND_SEQ_CLIENT_SYSTEM = _sequencer_alsa.SND_SEQ_CLIENT_SYSTEM

def snd_seq_open(handle, name, streams, mode):
    return _sequencer_alsa.snd_seq_open(handle, name, streams, mode)

def snd_seq_open_lconf(handle, name, streams, mode, lconf):
    return _sequencer_alsa.snd_seq_open_lconf(handle, name, streams, mode, lconf)

def snd_seq_name(seq):
    return _sequencer_alsa.snd_seq_name(seq)

def snd_seq_type(seq):
    return _sequencer_alsa.snd_seq_type(seq)

def snd_seq_close(handle):
    return _sequencer_alsa.snd_seq_close(handle)

def snd_seq_poll_descriptors_count(handle, events):
    return _sequencer_alsa.snd_seq_poll_descriptors_count(handle, events)

def snd_seq_poll_descriptors(handle, pfds, space, events):
    return _sequencer_alsa.snd_seq_poll_descriptors(handle, pfds, space, events)

def snd_seq_poll_descriptors_revents(seq, pfds, nfds, revents):
    return _sequencer_alsa.snd_seq_poll_descriptors_revents(seq, pfds, nfds, revents)

def snd_seq_nonblock(handle, nonblock):
    return _sequencer_alsa.snd_seq_nonblock(handle, nonblock)

def snd_seq_client_id(handle):
    return _sequencer_alsa.snd_seq_client_id(handle)

def snd_seq_get_output_buffer_size(handle):
    return _sequencer_alsa.snd_seq_get_output_buffer_size(handle)

def snd_seq_get_input_buffer_size(handle):
    return _sequencer_alsa.snd_seq_get_input_buffer_size(handle)

def snd_seq_set_output_buffer_size(handle, size):
    return _sequencer_alsa.snd_seq_set_output_buffer_size(handle, size)

def snd_seq_set_input_buffer_size(handle, size):
    return _sequencer_alsa.snd_seq_set_input_buffer_size(handle, size)

def snd_seq_system_info_sizeof():
    return _sequencer_alsa.snd_seq_system_info_sizeof()

def snd_seq_system_info_malloc(ptr):
    return _sequencer_alsa.snd_seq_system_info_malloc(ptr)

def snd_seq_system_info_free(ptr):
    return _sequencer_alsa.snd_seq_system_info_free(ptr)

def snd_seq_system_info_copy(dst, src):
    return _sequencer_alsa.snd_seq_system_info_copy(dst, src)

def snd_seq_system_info_get_queues(info):
    return _sequencer_alsa.snd_seq_system_info_get_queues(info)

def snd_seq_system_info_get_clients(info):
    return _sequencer_alsa.snd_seq_system_info_get_clients(info)

def snd_seq_system_info_get_ports(info):
    return _sequencer_alsa.snd_seq_system_info_get_ports(info)

def snd_seq_system_info_get_channels(info):
    return _sequencer_alsa.snd_seq_system_info_get_channels(info)

def snd_seq_system_info_get_cur_clients(info):
    return _sequencer_alsa.snd_seq_system_info_get_cur_clients(info)

def snd_seq_system_info_get_cur_queues(info):
    return _sequencer_alsa.snd_seq_system_info_get_cur_queues(info)

def snd_seq_system_info(handle, info):
    return _sequencer_alsa.snd_seq_system_info(handle, info)
SND_SEQ_USER_CLIENT = _sequencer_alsa.SND_SEQ_USER_CLIENT
SND_SEQ_KERNEL_CLIENT = _sequencer_alsa.SND_SEQ_KERNEL_CLIENT

def snd_seq_client_info_sizeof():
    return _sequencer_alsa.snd_seq_client_info_sizeof()

def snd_seq_client_info_malloc(ptr):
    return _sequencer_alsa.snd_seq_client_info_malloc(ptr)

def snd_seq_client_info_free(ptr):
    return _sequencer_alsa.snd_seq_client_info_free(ptr)

def snd_seq_client_info_copy(dst, src):
    return _sequencer_alsa.snd_seq_client_info_copy(dst, src)

def snd_seq_client_info_get_client(info):
    return _sequencer_alsa.snd_seq_client_info_get_client(info)

def snd_seq_client_info_get_type(info):
    return _sequencer_alsa.snd_seq_client_info_get_type(info)

def snd_seq_client_info_get_name(info):
    return _sequencer_alsa.snd_seq_client_info_get_name(info)

def snd_seq_client_info_get_broadcast_filter(info):
    return _sequencer_alsa.snd_seq_client_info_get_broadcast_filter(info)

def snd_seq_client_info_get_error_bounce(info):
    return _sequencer_alsa.snd_seq_client_info_get_error_bounce(info)

def snd_seq_client_info_get_card(info):
    return _sequencer_alsa.snd_seq_client_info_get_card(info)

def snd_seq_client_info_get_pid(info):
    return _sequencer_alsa.snd_seq_client_info_get_pid(info)

def snd_seq_client_info_get_event_filter(info):
    return _sequencer_alsa.snd_seq_client_info_get_event_filter(info)

def snd_seq_client_info_get_num_ports(info):
    return _sequencer_alsa.snd_seq_client_info_get_num_ports(info)

def snd_seq_client_info_get_event_lost(info):
    return _sequencer_alsa.snd_seq_client_info_get_event_lost(info)

def snd_seq_client_info_set_client(info, client):
    return _sequencer_alsa.snd_seq_client_info_set_client(info, client)

def snd_seq_client_info_set_name(info, name):
    return _sequencer_alsa.snd_seq_client_info_set_name(info, name)

def snd_seq_client_info_set_broadcast_filter(info, val):
    return _sequencer_alsa.snd_seq_client_info_set_broadcast_filter(info, val)

def snd_seq_client_info_set_error_bounce(info, val):
    return _sequencer_alsa.snd_seq_client_info_set_error_bounce(info, val)

def snd_seq_client_info_set_event_filter(info, filter):
    return _sequencer_alsa.snd_seq_client_info_set_event_filter(info, filter)

def snd_seq_client_info_event_filter_clear(info):
    return _sequencer_alsa.snd_seq_client_info_event_filter_clear(info)

def snd_seq_client_info_event_filter_add(info, event_type):
    return _sequencer_alsa.snd_seq_client_info_event_filter_add(info, event_type)

def snd_seq_client_info_event_filter_del(info, event_type):
    return _sequencer_alsa.snd_seq_client_info_event_filter_del(info, event_type)

def snd_seq_client_info_event_filter_check(info, event_type):
    return _sequencer_alsa.snd_seq_client_info_event_filter_check(info, event_type)

def snd_seq_get_client_info(handle, info):
    return _sequencer_alsa.snd_seq_get_client_info(handle, info)

def snd_seq_get_any_client_info(handle, client, info):
    return _sequencer_alsa.snd_seq_get_any_client_info(handle, client, info)

def snd_seq_set_client_info(handle, info):
    return _sequencer_alsa.snd_seq_set_client_info(handle, info)

def snd_seq_query_next_client(handle, info):
    return _sequencer_alsa.snd_seq_query_next_client(handle, info)

def snd_seq_client_pool_sizeof():
    return _sequencer_alsa.snd_seq_client_pool_sizeof()

def snd_seq_client_pool_malloc(ptr):
    return _sequencer_alsa.snd_seq_client_pool_malloc(ptr)

def snd_seq_client_pool_free(ptr):
    return _sequencer_alsa.snd_seq_client_pool_free(ptr)

def snd_seq_client_pool_copy(dst, src):
    return _sequencer_alsa.snd_seq_client_pool_copy(dst, src)

def snd_seq_client_pool_get_client(info):
    return _sequencer_alsa.snd_seq_client_pool_get_client(info)

def snd_seq_client_pool_get_output_pool(info):
    return _sequencer_alsa.snd_seq_client_pool_get_output_pool(info)

def snd_seq_client_pool_get_input_pool(info):
    return _sequencer_alsa.snd_seq_client_pool_get_input_pool(info)

def snd_seq_client_pool_get_output_room(info):
    return _sequencer_alsa.snd_seq_client_pool_get_output_room(info)

def snd_seq_client_pool_get_output_free(info):
    return _sequencer_alsa.snd_seq_client_pool_get_output_free(info)

def snd_seq_client_pool_get_input_free(info):
    return _sequencer_alsa.snd_seq_client_pool_get_input_free(info)

def snd_seq_client_pool_set_output_pool(info, size):
    return _sequencer_alsa.snd_seq_client_pool_set_output_pool(info, size)

def snd_seq_client_pool_set_input_pool(info, size):
    return _sequencer_alsa.snd_seq_client_pool_set_input_pool(info, size)

def snd_seq_client_pool_set_output_room(info, size):
    return _sequencer_alsa.snd_seq_client_pool_set_output_room(info, size)

def snd_seq_get_client_pool(handle, info):
    return _sequencer_alsa.snd_seq_get_client_pool(handle, info)

def snd_seq_set_client_pool(handle, info):
    return _sequencer_alsa.snd_seq_set_client_pool(handle, info)
SND_SEQ_PORT_SYSTEM_TIMER = _sequencer_alsa.SND_SEQ_PORT_SYSTEM_TIMER
SND_SEQ_PORT_SYSTEM_ANNOUNCE = _sequencer_alsa.SND_SEQ_PORT_SYSTEM_ANNOUNCE
SND_SEQ_PORT_CAP_READ = _sequencer_alsa.SND_SEQ_PORT_CAP_READ
SND_SEQ_PORT_CAP_WRITE = _sequencer_alsa.SND_SEQ_PORT_CAP_WRITE
SND_SEQ_PORT_CAP_SYNC_READ = _sequencer_alsa.SND_SEQ_PORT_CAP_SYNC_READ
SND_SEQ_PORT_CAP_SYNC_WRITE = _sequencer_alsa.SND_SEQ_PORT_CAP_SYNC_WRITE
SND_SEQ_PORT_CAP_DUPLEX = _sequencer_alsa.SND_SEQ_PORT_CAP_DUPLEX
SND_SEQ_PORT_CAP_SUBS_READ = _sequencer_alsa.SND_SEQ_PORT_CAP_SUBS_READ
SND_SEQ_PORT_CAP_SUBS_WRITE = _sequencer_alsa.SND_SEQ_PORT_CAP_SUBS_WRITE
SND_SEQ_PORT_CAP_NO_EXPORT = _sequencer_alsa.SND_SEQ_PORT_CAP_NO_EXPORT
SND_SEQ_PORT_TYPE_SPECIFIC = _sequencer_alsa.SND_SEQ_PORT_TYPE_SPECIFIC
SND_SEQ_PORT_TYPE_MIDI_GENERIC = _sequencer_alsa.SND_SEQ_PORT_TYPE_MIDI_GENERIC
SND_SEQ_PORT_TYPE_MIDI_GM = _sequencer_alsa.SND_SEQ_PORT_TYPE_MIDI_GM
SND_SEQ_PORT_TYPE_MIDI_GS = _sequencer_alsa.SND_SEQ_PORT_TYPE_MIDI_GS
SND_SEQ_PORT_TYPE_MIDI_XG = _sequencer_alsa.SND_SEQ_PORT_TYPE_MIDI_XG
SND_SEQ_PORT_TYPE_MIDI_MT32 = _sequencer_alsa.SND_SEQ_PORT_TYPE_MIDI_MT32
SND_SEQ_PORT_TYPE_MIDI_GM2 = _sequencer_alsa.SND_SEQ_PORT_TYPE_MIDI_GM2
SND_SEQ_PORT_TYPE_SYNTH = _sequencer_alsa.SND_SEQ_PORT_TYPE_SYNTH
SND_SEQ_PORT_TYPE_DIRECT_SAMPLE = _sequencer_alsa.SND_SEQ_PORT_TYPE_DIRECT_SAMPLE
SND_SEQ_PORT_TYPE_SAMPLE = _sequencer_alsa.SND_SEQ_PORT_TYPE_SAMPLE
SND_SEQ_PORT_TYPE_HARDWARE = _sequencer_alsa.SND_SEQ_PORT_TYPE_HARDWARE
SND_SEQ_PORT_TYPE_SOFTWARE = _sequencer_alsa.SND_SEQ_PORT_TYPE_SOFTWARE
SND_SEQ_PORT_TYPE_SYNTHESIZER = _sequencer_alsa.SND_SEQ_PORT_TYPE_SYNTHESIZER
SND_SEQ_PORT_TYPE_PORT = _sequencer_alsa.SND_SEQ_PORT_TYPE_PORT
SND_SEQ_PORT_TYPE_APPLICATION = _sequencer_alsa.SND_SEQ_PORT_TYPE_APPLICATION

def snd_seq_port_info_sizeof():
    return _sequencer_alsa.snd_seq_port_info_sizeof()

def snd_seq_port_info_malloc(ptr):
    return _sequencer_alsa.snd_seq_port_info_malloc(ptr)

def snd_seq_port_info_free(ptr):
    return _sequencer_alsa.snd_seq_port_info_free(ptr)

def snd_seq_port_info_copy(dst, src):
    return _sequencer_alsa.snd_seq_port_info_copy(dst, src)

def snd_seq_port_info_get_client(info):
    return _sequencer_alsa.snd_seq_port_info_get_client(info)

def snd_seq_port_info_get_port(info):
    return _sequencer_alsa.snd_seq_port_info_get_port(info)

def snd_seq_port_info_get_addr(info):
    return _sequencer_alsa.snd_seq_port_info_get_addr(info)

def snd_seq_port_info_get_name(info):
    return _sequencer_alsa.snd_seq_port_info_get_name(info)

def snd_seq_port_info_get_capability(info):
    return _sequencer_alsa.snd_seq_port_info_get_capability(info)

def snd_seq_port_info_get_type(info):
    return _sequencer_alsa.snd_seq_port_info_get_type(info)

def snd_seq_port_info_get_midi_channels(info):
    return _sequencer_alsa.snd_seq_port_info_get_midi_channels(info)

def snd_seq_port_info_get_midi_voices(info):
    return _sequencer_alsa.snd_seq_port_info_get_midi_voices(info)

def snd_seq_port_info_get_synth_voices(info):
    return _sequencer_alsa.snd_seq_port_info_get_synth_voices(info)

def snd_seq_port_info_get_read_use(info):
    return _sequencer_alsa.snd_seq_port_info_get_read_use(info)

def snd_seq_port_info_get_write_use(info):
    return _sequencer_alsa.snd_seq_port_info_get_write_use(info)

def snd_seq_port_info_get_port_specified(info):
    return _sequencer_alsa.snd_seq_port_info_get_port_specified(info)

def snd_seq_port_info_get_timestamping(info):
    return _sequencer_alsa.snd_seq_port_info_get_timestamping(info)

def snd_seq_port_info_get_timestamp_real(info):
    return _sequencer_alsa.snd_seq_port_info_get_timestamp_real(info)

def snd_seq_port_info_get_timestamp_queue(info):
    return _sequencer_alsa.snd_seq_port_info_get_timestamp_queue(info)

def snd_seq_port_info_set_client(info, client):
    return _sequencer_alsa.snd_seq_port_info_set_client(info, client)

def snd_seq_port_info_set_port(info, port):
    return _sequencer_alsa.snd_seq_port_info_set_port(info, port)

def snd_seq_port_info_set_addr(info, addr):
    return _sequencer_alsa.snd_seq_port_info_set_addr(info, addr)

def snd_seq_port_info_set_name(info, name):
    return _sequencer_alsa.snd_seq_port_info_set_name(info, name)

def snd_seq_port_info_set_capability(info, capability):
    return _sequencer_alsa.snd_seq_port_info_set_capability(info, capability)

def snd_seq_port_info_set_type(info, type):
    return _sequencer_alsa.snd_seq_port_info_set_type(info, type)

def snd_seq_port_info_set_midi_channels(info, channels):
    return _sequencer_alsa.snd_seq_port_info_set_midi_channels(info, channels)

def snd_seq_port_info_set_midi_voices(info, voices):
    return _sequencer_alsa.snd_seq_port_info_set_midi_voices(info, voices)

def snd_seq_port_info_set_synth_voices(info, voices):
    return _sequencer_alsa.snd_seq_port_info_set_synth_voices(info, voices)

def snd_seq_port_info_set_port_specified(info, val):
    return _sequencer_alsa.snd_seq_port_info_set_port_specified(info, val)

def snd_seq_port_info_set_timestamping(info, enable):
    return _sequencer_alsa.snd_seq_port_info_set_timestamping(info, enable)

def snd_seq_port_info_set_timestamp_real(info, realtime):
    return _sequencer_alsa.snd_seq_port_info_set_timestamp_real(info, realtime)

def snd_seq_port_info_set_timestamp_queue(info, queue):
    return _sequencer_alsa.snd_seq_port_info_set_timestamp_queue(info, queue)

def snd_seq_create_port(handle, info):
    return _sequencer_alsa.snd_seq_create_port(handle, info)

def snd_seq_delete_port(handle, port):
    return _sequencer_alsa.snd_seq_delete_port(handle, port)

def snd_seq_get_port_info(handle, port, info):
    return _sequencer_alsa.snd_seq_get_port_info(handle, port, info)

def snd_seq_get_any_port_info(handle, client, port, info):
    return _sequencer_alsa.snd_seq_get_any_port_info(handle, client, port, info)

def snd_seq_set_port_info(handle, port, info):
    return _sequencer_alsa.snd_seq_set_port_info(handle, port, info)

def snd_seq_query_next_port(handle, info):
    return _sequencer_alsa.snd_seq_query_next_port(handle, info)

def snd_seq_port_subscribe_sizeof():
    return _sequencer_alsa.snd_seq_port_subscribe_sizeof()

def snd_seq_port_subscribe_malloc(ptr):
    return _sequencer_alsa.snd_seq_port_subscribe_malloc(ptr)

def snd_seq_port_subscribe_free(ptr):
    return _sequencer_alsa.snd_seq_port_subscribe_free(ptr)

def snd_seq_port_subscribe_copy(dst, src):
    return _sequencer_alsa.snd_seq_port_subscribe_copy(dst, src)

def snd_seq_port_subscribe_get_sender(info):
    return _sequencer_alsa.snd_seq_port_subscribe_get_sender(info)

def snd_seq_port_subscribe_get_dest(info):
    return _sequencer_alsa.snd_seq_port_subscribe_get_dest(info)

def snd_seq_port_subscribe_get_queue(info):
    return _sequencer_alsa.snd_seq_port_subscribe_get_queue(info)

def snd_seq_port_subscribe_get_exclusive(info):
    return _sequencer_alsa.snd_seq_port_subscribe_get_exclusive(info)

def snd_seq_port_subscribe_get_time_update(info):
    return _sequencer_alsa.snd_seq_port_subscribe_get_time_update(info)

def snd_seq_port_subscribe_get_time_real(info):
    return _sequencer_alsa.snd_seq_port_subscribe_get_time_real(info)

def snd_seq_port_subscribe_set_sender(info, addr):
    return _sequencer_alsa.snd_seq_port_subscribe_set_sender(info, addr)

def snd_seq_port_subscribe_set_dest(info, addr):
    return _sequencer_alsa.snd_seq_port_subscribe_set_dest(info, addr)

def snd_seq_port_subscribe_set_queue(info, q):
    return _sequencer_alsa.snd_seq_port_subscribe_set_queue(info, q)

def snd_seq_port_subscribe_set_exclusive(info, val):
    return _sequencer_alsa.snd_seq_port_subscribe_set_exclusive(info, val)

def snd_seq_port_subscribe_set_time_update(info, val):
    return _sequencer_alsa.snd_seq_port_subscribe_set_time_update(info, val)

def snd_seq_port_subscribe_set_time_real(info, val):
    return _sequencer_alsa.snd_seq_port_subscribe_set_time_real(info, val)

def snd_seq_get_port_subscription(handle, sub):
    return _sequencer_alsa.snd_seq_get_port_subscription(handle, sub)

def snd_seq_subscribe_port(handle, sub):
    return _sequencer_alsa.snd_seq_subscribe_port(handle, sub)

def snd_seq_unsubscribe_port(handle, sub):
    return _sequencer_alsa.snd_seq_unsubscribe_port(handle, sub)
SND_SEQ_QUERY_SUBS_READ = _sequencer_alsa.SND_SEQ_QUERY_SUBS_READ
SND_SEQ_QUERY_SUBS_WRITE = _sequencer_alsa.SND_SEQ_QUERY_SUBS_WRITE

def snd_seq_query_subscribe_sizeof():
    return _sequencer_alsa.snd_seq_query_subscribe_sizeof()

def snd_seq_query_subscribe_malloc(ptr):
    return _sequencer_alsa.snd_seq_query_subscribe_malloc(ptr)

def snd_seq_query_subscribe_free(ptr):
    return _sequencer_alsa.snd_seq_query_subscribe_free(ptr)

def snd_seq_query_subscribe_copy(dst, src):
    return _sequencer_alsa.snd_seq_query_subscribe_copy(dst, src)

def snd_seq_query_subscribe_get_client(info):
    return _sequencer_alsa.snd_seq_query_subscribe_get_client(info)

def snd_seq_query_subscribe_get_port(info):
    return _sequencer_alsa.snd_seq_query_subscribe_get_port(info)

def snd_seq_query_subscribe_get_root(info):
    return _sequencer_alsa.snd_seq_query_subscribe_get_root(info)

def snd_seq_query_subscribe_get_type(info):
    return _sequencer_alsa.snd_seq_query_subscribe_get_type(info)

def snd_seq_query_subscribe_get_index(info):
    return _sequencer_alsa.snd_seq_query_subscribe_get_index(info)

def snd_seq_query_subscribe_get_num_subs(info):
    return _sequencer_alsa.snd_seq_query_subscribe_get_num_subs(info)

def snd_seq_query_subscribe_get_addr(info):
    return _sequencer_alsa.snd_seq_query_subscribe_get_addr(info)

def snd_seq_query_subscribe_get_queue(info):
    return _sequencer_alsa.snd_seq_query_subscribe_get_queue(info)

def snd_seq_query_subscribe_get_exclusive(info):
    return _sequencer_alsa.snd_seq_query_subscribe_get_exclusive(info)

def snd_seq_query_subscribe_get_time_update(info):
    return _sequencer_alsa.snd_seq_query_subscribe_get_time_update(info)

def snd_seq_query_subscribe_get_time_real(info):
    return _sequencer_alsa.snd_seq_query_subscribe_get_time_real(info)

def snd_seq_query_subscribe_set_client(info, client):
    return _sequencer_alsa.snd_seq_query_subscribe_set_client(info, client)

def snd_seq_query_subscribe_set_port(info, port):
    return _sequencer_alsa.snd_seq_query_subscribe_set_port(info, port)

def snd_seq_query_subscribe_set_root(info, addr):
    return _sequencer_alsa.snd_seq_query_subscribe_set_root(info, addr)

def snd_seq_query_subscribe_set_type(info, type):
    return _sequencer_alsa.snd_seq_query_subscribe_set_type(info, type)

def snd_seq_query_subscribe_set_index(info, _index):
    return _sequencer_alsa.snd_seq_query_subscribe_set_index(info, _index)

def snd_seq_query_port_subscribers(seq, subs):
    return _sequencer_alsa.snd_seq_query_port_subscribers(seq, subs)
SND_SEQ_QUEUE_DIRECT = _sequencer_alsa.SND_SEQ_QUEUE_DIRECT

def snd_seq_queue_info_sizeof():
    return _sequencer_alsa.snd_seq_queue_info_sizeof()

def snd_seq_queue_info_malloc(ptr):
    return _sequencer_alsa.snd_seq_queue_info_malloc(ptr)

def snd_seq_queue_info_free(ptr):
    return _sequencer_alsa.snd_seq_queue_info_free(ptr)

def snd_seq_queue_info_copy(dst, src):
    return _sequencer_alsa.snd_seq_queue_info_copy(dst, src)

def snd_seq_queue_info_get_queue(info):
    return _sequencer_alsa.snd_seq_queue_info_get_queue(info)

def snd_seq_queue_info_get_name(info):
    return _sequencer_alsa.snd_seq_queue_info_get_name(info)

def snd_seq_queue_info_get_owner(info):
    return _sequencer_alsa.snd_seq_queue_info_get_owner(info)

def snd_seq_queue_info_get_locked(info):
    return _sequencer_alsa.snd_seq_queue_info_get_locked(info)

def snd_seq_queue_info_get_flags(info):
    return _sequencer_alsa.snd_seq_queue_info_get_flags(info)

def snd_seq_queue_info_set_name(info, name):
    return _sequencer_alsa.snd_seq_queue_info_set_name(info, name)

def snd_seq_queue_info_set_owner(info, owner):
    return _sequencer_alsa.snd_seq_queue_info_set_owner(info, owner)

def snd_seq_queue_info_set_locked(info, locked):
    return _sequencer_alsa.snd_seq_queue_info_set_locked(info, locked)

def snd_seq_queue_info_set_flags(info, flags):
    return _sequencer_alsa.snd_seq_queue_info_set_flags(info, flags)

def snd_seq_create_queue(seq, info):
    return _sequencer_alsa.snd_seq_create_queue(seq, info)

def snd_seq_alloc_named_queue(seq, name):
    return _sequencer_alsa.snd_seq_alloc_named_queue(seq, name)

def snd_seq_alloc_queue(handle):
    return _sequencer_alsa.snd_seq_alloc_queue(handle)

def snd_seq_free_queue(handle, q):
    return _sequencer_alsa.snd_seq_free_queue(handle, q)

def snd_seq_get_queue_info(seq, q, info):
    return _sequencer_alsa.snd_seq_get_queue_info(seq, q, info)

def snd_seq_set_queue_info(seq, q, info):
    return _sequencer_alsa.snd_seq_set_queue_info(seq, q, info)

def snd_seq_query_named_queue(seq, name):
    return _sequencer_alsa.snd_seq_query_named_queue(seq, name)

def snd_seq_get_queue_usage(handle, q):
    return _sequencer_alsa.snd_seq_get_queue_usage(handle, q)

def snd_seq_set_queue_usage(handle, q, used):
    return _sequencer_alsa.snd_seq_set_queue_usage(handle, q, used)

def snd_seq_queue_status_sizeof():
    return _sequencer_alsa.snd_seq_queue_status_sizeof()

def snd_seq_queue_status_malloc(ptr):
    return _sequencer_alsa.snd_seq_queue_status_malloc(ptr)

def snd_seq_queue_status_free(ptr):
    return _sequencer_alsa.snd_seq_queue_status_free(ptr)

def snd_seq_queue_status_copy(dst, src):
    return _sequencer_alsa.snd_seq_queue_status_copy(dst, src)

def snd_seq_queue_status_get_queue(info):
    return _sequencer_alsa.snd_seq_queue_status_get_queue(info)

def snd_seq_queue_status_get_events(info):
    return _sequencer_alsa.snd_seq_queue_status_get_events(info)

def snd_seq_queue_status_get_tick_time(info):
    return _sequencer_alsa.snd_seq_queue_status_get_tick_time(info)

def snd_seq_queue_status_get_real_time(info):
    return _sequencer_alsa.snd_seq_queue_status_get_real_time(info)

def snd_seq_queue_status_get_status(info):
    return _sequencer_alsa.snd_seq_queue_status_get_status(info)

def snd_seq_get_queue_status(handle, q, status):
    return _sequencer_alsa.snd_seq_get_queue_status(handle, q, status)

def snd_seq_queue_tempo_sizeof():
    return _sequencer_alsa.snd_seq_queue_tempo_sizeof()

def snd_seq_queue_tempo_malloc(ptr):
    return _sequencer_alsa.snd_seq_queue_tempo_malloc(ptr)

def snd_seq_queue_tempo_free(ptr):
    return _sequencer_alsa.snd_seq_queue_tempo_free(ptr)

def snd_seq_queue_tempo_copy(dst, src):
    return _sequencer_alsa.snd_seq_queue_tempo_copy(dst, src)

def snd_seq_queue_tempo_get_queue(info):
    return _sequencer_alsa.snd_seq_queue_tempo_get_queue(info)

def snd_seq_queue_tempo_get_tempo(info):
    return _sequencer_alsa.snd_seq_queue_tempo_get_tempo(info)

def snd_seq_queue_tempo_get_ppq(info):
    return _sequencer_alsa.snd_seq_queue_tempo_get_ppq(info)

def snd_seq_queue_tempo_get_skew(info):
    return _sequencer_alsa.snd_seq_queue_tempo_get_skew(info)

def snd_seq_queue_tempo_get_skew_base(info):
    return _sequencer_alsa.snd_seq_queue_tempo_get_skew_base(info)

def snd_seq_queue_tempo_set_tempo(info, tempo):
    return _sequencer_alsa.snd_seq_queue_tempo_set_tempo(info, tempo)

def snd_seq_queue_tempo_set_ppq(info, ppq):
    return _sequencer_alsa.snd_seq_queue_tempo_set_ppq(info, ppq)

def snd_seq_queue_tempo_set_skew(info, skew):
    return _sequencer_alsa.snd_seq_queue_tempo_set_skew(info, skew)

def snd_seq_queue_tempo_set_skew_base(info, base):
    return _sequencer_alsa.snd_seq_queue_tempo_set_skew_base(info, base)

def snd_seq_get_queue_tempo(handle, q, tempo):
    return _sequencer_alsa.snd_seq_get_queue_tempo(handle, q, tempo)

def snd_seq_set_queue_tempo(handle, q, tempo):
    return _sequencer_alsa.snd_seq_set_queue_tempo(handle, q, tempo)
SND_SEQ_TIMER_ALSA = _sequencer_alsa.SND_SEQ_TIMER_ALSA
SND_SEQ_TIMER_MIDI_CLOCK = _sequencer_alsa.SND_SEQ_TIMER_MIDI_CLOCK
SND_SEQ_TIMER_MIDI_TICK = _sequencer_alsa.SND_SEQ_TIMER_MIDI_TICK

def snd_seq_queue_timer_sizeof():
    return _sequencer_alsa.snd_seq_queue_timer_sizeof()

def snd_seq_queue_timer_malloc(ptr):
    return _sequencer_alsa.snd_seq_queue_timer_malloc(ptr)

def snd_seq_queue_timer_free(ptr):
    return _sequencer_alsa.snd_seq_queue_timer_free(ptr)

def snd_seq_queue_timer_copy(dst, src):
    return _sequencer_alsa.snd_seq_queue_timer_copy(dst, src)

def snd_seq_queue_timer_get_queue(info):
    return _sequencer_alsa.snd_seq_queue_timer_get_queue(info)

def snd_seq_queue_timer_get_type(info):
    return _sequencer_alsa.snd_seq_queue_timer_get_type(info)

def snd_seq_queue_timer_get_id(info):
    return _sequencer_alsa.snd_seq_queue_timer_get_id(info)

def snd_seq_queue_timer_get_resolution(info):
    return _sequencer_alsa.snd_seq_queue_timer_get_resolution(info)

def snd_seq_queue_timer_set_type(info, type):
    return _sequencer_alsa.snd_seq_queue_timer_set_type(info, type)

def snd_seq_queue_timer_set_id(info, id):
    return _sequencer_alsa.snd_seq_queue_timer_set_id(info, id)

def snd_seq_queue_timer_set_resolution(info, resolution):
    return _sequencer_alsa.snd_seq_queue_timer_set_resolution(info, resolution)

def snd_seq_get_queue_timer(handle, q, timer):
    return _sequencer_alsa.snd_seq_get_queue_timer(handle, q, timer)

def snd_seq_set_queue_timer(handle, q, timer):
    return _sequencer_alsa.snd_seq_set_queue_timer(handle, q, timer)

def snd_seq_free_event(ev):
    return _sequencer_alsa.snd_seq_free_event(ev)

def snd_seq_event_length(ev):
    return _sequencer_alsa.snd_seq_event_length(ev)

def snd_seq_event_output(handle, ev):
    return _sequencer_alsa.snd_seq_event_output(handle, ev)

def snd_seq_event_output_buffer(handle, ev):
    return _sequencer_alsa.snd_seq_event_output_buffer(handle, ev)

def snd_seq_event_output_direct(handle, ev):
    return _sequencer_alsa.snd_seq_event_output_direct(handle, ev)

def snd_seq_event_input(handle, ev):
    return _sequencer_alsa.snd_seq_event_input(handle, ev)

def snd_seq_event_input_pending(seq, fetch_sequencer):
    return _sequencer_alsa.snd_seq_event_input_pending(seq, fetch_sequencer)

def snd_seq_drain_output(handle):
    return _sequencer_alsa.snd_seq_drain_output(handle)

def snd_seq_event_output_pending(seq):
    return _sequencer_alsa.snd_seq_event_output_pending(seq)

def snd_seq_extract_output(handle, ev):
    return _sequencer_alsa.snd_seq_extract_output(handle, ev)

def snd_seq_drop_output(handle):
    return _sequencer_alsa.snd_seq_drop_output(handle)

def snd_seq_drop_output_buffer(handle):
    return _sequencer_alsa.snd_seq_drop_output_buffer(handle)

def snd_seq_drop_input(handle):
    return _sequencer_alsa.snd_seq_drop_input(handle)

def snd_seq_drop_input_buffer(handle):
    return _sequencer_alsa.snd_seq_drop_input_buffer(handle)
SND_SEQ_REMOVE_INPUT = _sequencer_alsa.SND_SEQ_REMOVE_INPUT
SND_SEQ_REMOVE_OUTPUT = _sequencer_alsa.SND_SEQ_REMOVE_OUTPUT
SND_SEQ_REMOVE_DEST = _sequencer_alsa.SND_SEQ_REMOVE_DEST
SND_SEQ_REMOVE_DEST_CHANNEL = _sequencer_alsa.SND_SEQ_REMOVE_DEST_CHANNEL
SND_SEQ_REMOVE_TIME_BEFORE = _sequencer_alsa.SND_SEQ_REMOVE_TIME_BEFORE
SND_SEQ_REMOVE_TIME_AFTER = _sequencer_alsa.SND_SEQ_REMOVE_TIME_AFTER
SND_SEQ_REMOVE_TIME_TICK = _sequencer_alsa.SND_SEQ_REMOVE_TIME_TICK
SND_SEQ_REMOVE_EVENT_TYPE = _sequencer_alsa.SND_SEQ_REMOVE_EVENT_TYPE
SND_SEQ_REMOVE_IGNORE_OFF = _sequencer_alsa.SND_SEQ_REMOVE_IGNORE_OFF
SND_SEQ_REMOVE_TAG_MATCH = _sequencer_alsa.SND_SEQ_REMOVE_TAG_MATCH

def snd_seq_remove_events_sizeof():
    return _sequencer_alsa.snd_seq_remove_events_sizeof()

def snd_seq_remove_events_malloc(ptr):
    return _sequencer_alsa.snd_seq_remove_events_malloc(ptr)

def snd_seq_remove_events_free(ptr):
    return _sequencer_alsa.snd_seq_remove_events_free(ptr)

def snd_seq_remove_events_copy(dst, src):
    return _sequencer_alsa.snd_seq_remove_events_copy(dst, src)

def snd_seq_remove_events_get_condition(info):
    return _sequencer_alsa.snd_seq_remove_events_get_condition(info)

def snd_seq_remove_events_get_queue(info):
    return _sequencer_alsa.snd_seq_remove_events_get_queue(info)

def snd_seq_remove_events_get_time(info):
    return _sequencer_alsa.snd_seq_remove_events_get_time(info)

def snd_seq_remove_events_get_dest(info):
    return _sequencer_alsa.snd_seq_remove_events_get_dest(info)

def snd_seq_remove_events_get_channel(info):
    return _sequencer_alsa.snd_seq_remove_events_get_channel(info)

def snd_seq_remove_events_get_event_type(info):
    return _sequencer_alsa.snd_seq_remove_events_get_event_type(info)

def snd_seq_remove_events_get_tag(info):
    return _sequencer_alsa.snd_seq_remove_events_get_tag(info)

def snd_seq_remove_events_set_condition(info, flags):
    return _sequencer_alsa.snd_seq_remove_events_set_condition(info, flags)

def snd_seq_remove_events_set_queue(info, queue):
    return _sequencer_alsa.snd_seq_remove_events_set_queue(info, queue)

def snd_seq_remove_events_set_time(info, time):
    return _sequencer_alsa.snd_seq_remove_events_set_time(info, time)

def snd_seq_remove_events_set_dest(info, addr):
    return _sequencer_alsa.snd_seq_remove_events_set_dest(info, addr)

def snd_seq_remove_events_set_channel(info, channel):
    return _sequencer_alsa.snd_seq_remove_events_set_channel(info, channel)

def snd_seq_remove_events_set_event_type(info, type):
    return _sequencer_alsa.snd_seq_remove_events_set_event_type(info, type)

def snd_seq_remove_events_set_tag(info, tag):
    return _sequencer_alsa.snd_seq_remove_events_set_tag(info, tag)

def snd_seq_remove_events(handle, info):
    return _sequencer_alsa.snd_seq_remove_events(handle, info)

def snd_seq_set_bit(nr, array):
    return _sequencer_alsa.snd_seq_set_bit(nr, array)

def snd_seq_unset_bit(nr, array):
    return _sequencer_alsa.snd_seq_unset_bit(nr, array)

def snd_seq_change_bit(nr, array):
    return _sequencer_alsa.snd_seq_change_bit(nr, array)

def snd_seq_get_bit(nr, array):
    return _sequencer_alsa.snd_seq_get_bit(nr, array)
SND_SEQ_EVFLG_RESULT = _sequencer_alsa.SND_SEQ_EVFLG_RESULT
SND_SEQ_EVFLG_NOTE = _sequencer_alsa.SND_SEQ_EVFLG_NOTE
SND_SEQ_EVFLG_CONTROL = _sequencer_alsa.SND_SEQ_EVFLG_CONTROL
SND_SEQ_EVFLG_QUEUE = _sequencer_alsa.SND_SEQ_EVFLG_QUEUE
SND_SEQ_EVFLG_SYSTEM = _sequencer_alsa.SND_SEQ_EVFLG_SYSTEM
SND_SEQ_EVFLG_MESSAGE = _sequencer_alsa.SND_SEQ_EVFLG_MESSAGE
SND_SEQ_EVFLG_CONNECTION = _sequencer_alsa.SND_SEQ_EVFLG_CONNECTION
SND_SEQ_EVFLG_SAMPLE = _sequencer_alsa.SND_SEQ_EVFLG_SAMPLE
SND_SEQ_EVFLG_USERS = _sequencer_alsa.SND_SEQ_EVFLG_USERS
SND_SEQ_EVFLG_INSTR = _sequencer_alsa.SND_SEQ_EVFLG_INSTR
SND_SEQ_EVFLG_QUOTE = _sequencer_alsa.SND_SEQ_EVFLG_QUOTE
SND_SEQ_EVFLG_NONE = _sequencer_alsa.SND_SEQ_EVFLG_NONE
SND_SEQ_EVFLG_RAW = _sequencer_alsa.SND_SEQ_EVFLG_RAW
SND_SEQ_EVFLG_FIXED = _sequencer_alsa.SND_SEQ_EVFLG_FIXED
SND_SEQ_EVFLG_VARIABLE = _sequencer_alsa.SND_SEQ_EVFLG_VARIABLE
SND_SEQ_EVFLG_VARUSR = _sequencer_alsa.SND_SEQ_EVFLG_VARUSR
SND_SEQ_EVFLG_NOTE_ONEARG = _sequencer_alsa.SND_SEQ_EVFLG_NOTE_ONEARG
SND_SEQ_EVFLG_NOTE_TWOARG = _sequencer_alsa.SND_SEQ_EVFLG_NOTE_TWOARG
SND_SEQ_EVFLG_QUEUE_NOARG = _sequencer_alsa.SND_SEQ_EVFLG_QUEUE_NOARG
SND_SEQ_EVFLG_QUEUE_TICK = _sequencer_alsa.SND_SEQ_EVFLG_QUEUE_TICK
SND_SEQ_EVFLG_QUEUE_TIME = _sequencer_alsa.SND_SEQ_EVFLG_QUEUE_TIME
SND_SEQ_EVFLG_QUEUE_VALUE = _sequencer_alsa.SND_SEQ_EVFLG_QUEUE_VALUE

def snd_seq_control_queue(seq, q, type, value, ev):
    return _sequencer_alsa.snd_seq_control_queue(seq, q, type, value, ev)

def snd_seq_create_simple_port(seq, name, caps, type):
    return _sequencer_alsa.snd_seq_create_simple_port(seq, name, caps, type)

def snd_seq_delete_simple_port(seq, port):
    return _sequencer_alsa.snd_seq_delete_simple_port(seq, port)

def snd_seq_connect_from(seq, my_port, src_client, src_port):
    return _sequencer_alsa.snd_seq_connect_from(seq, my_port, src_client, src_port)

def snd_seq_connect_to(seq, my_port, dest_client, dest_port):
    return _sequencer_alsa.snd_seq_connect_to(seq, my_port, dest_client, dest_port)

def snd_seq_disconnect_from(seq, my_port, src_client, src_port):
    return _sequencer_alsa.snd_seq_disconnect_from(seq, my_port, src_client, src_port)

def snd_seq_disconnect_to(seq, my_port, dest_client, dest_port):
    return _sequencer_alsa.snd_seq_disconnect_to(seq, my_port, dest_client, dest_port)

def snd_seq_set_client_name(seq, name):
    return _sequencer_alsa.snd_seq_set_client_name(seq, name)

def snd_seq_set_client_event_filter(seq, event_type):
    return _sequencer_alsa.snd_seq_set_client_event_filter(seq, event_type)

def snd_seq_set_client_pool_output(seq, size):
    return _sequencer_alsa.snd_seq_set_client_pool_output(seq, size)

def snd_seq_set_client_pool_output_room(seq, size):
    return _sequencer_alsa.snd_seq_set_client_pool_output_room(seq, size)

def snd_seq_set_client_pool_input(seq, size):
    return _sequencer_alsa.snd_seq_set_client_pool_input(seq, size)

def snd_seq_sync_output_queue(seq):
    return _sequencer_alsa.snd_seq_sync_output_queue(seq)

def snd_seq_parse_address(seq, addr, str):
    return _sequencer_alsa.snd_seq_parse_address(seq, addr, str)

def snd_seq_reset_pool_output(seq):
    return _sequencer_alsa.snd_seq_reset_pool_output(seq)

def snd_seq_reset_pool_input(seq):
    return _sequencer_alsa.snd_seq_reset_pool_input(seq)
SND_SEQ_EVENT_SYSTEM = _sequencer_alsa.SND_SEQ_EVENT_SYSTEM
SND_SEQ_EVENT_RESULT = _sequencer_alsa.SND_SEQ_EVENT_RESULT
SND_SEQ_EVENT_NOTE = _sequencer_alsa.SND_SEQ_EVENT_NOTE
SND_SEQ_EVENT_NOTEON = _sequencer_alsa.SND_SEQ_EVENT_NOTEON
SND_SEQ_EVENT_NOTEOFF = _sequencer_alsa.SND_SEQ_EVENT_NOTEOFF
SND_SEQ_EVENT_KEYPRESS = _sequencer_alsa.SND_SEQ_EVENT_KEYPRESS
SND_SEQ_EVENT_CONTROLLER = _sequencer_alsa.SND_SEQ_EVENT_CONTROLLER
SND_SEQ_EVENT_PGMCHANGE = _sequencer_alsa.SND_SEQ_EVENT_PGMCHANGE
SND_SEQ_EVENT_CHANPRESS = _sequencer_alsa.SND_SEQ_EVENT_CHANPRESS
SND_SEQ_EVENT_PITCHBEND = _sequencer_alsa.SND_SEQ_EVENT_PITCHBEND
SND_SEQ_EVENT_CONTROL14 = _sequencer_alsa.SND_SEQ_EVENT_CONTROL14
SND_SEQ_EVENT_NONREGPARAM = _sequencer_alsa.SND_SEQ_EVENT_NONREGPARAM
SND_SEQ_EVENT_REGPARAM = _sequencer_alsa.SND_SEQ_EVENT_REGPARAM
SND_SEQ_EVENT_SONGPOS = _sequencer_alsa.SND_SEQ_EVENT_SONGPOS
SND_SEQ_EVENT_SONGSEL = _sequencer_alsa.SND_SEQ_EVENT_SONGSEL
SND_SEQ_EVENT_QFRAME = _sequencer_alsa.SND_SEQ_EVENT_QFRAME
SND_SEQ_EVENT_TIMESIGN = _sequencer_alsa.SND_SEQ_EVENT_TIMESIGN
SND_SEQ_EVENT_KEYSIGN = _sequencer_alsa.SND_SEQ_EVENT_KEYSIGN
SND_SEQ_EVENT_START = _sequencer_alsa.SND_SEQ_EVENT_START
SND_SEQ_EVENT_CONTINUE = _sequencer_alsa.SND_SEQ_EVENT_CONTINUE
SND_SEQ_EVENT_STOP = _sequencer_alsa.SND_SEQ_EVENT_STOP
SND_SEQ_EVENT_SETPOS_TICK = _sequencer_alsa.SND_SEQ_EVENT_SETPOS_TICK
SND_SEQ_EVENT_SETPOS_TIME = _sequencer_alsa.SND_SEQ_EVENT_SETPOS_TIME
SND_SEQ_EVENT_TEMPO = _sequencer_alsa.SND_SEQ_EVENT_TEMPO
SND_SEQ_EVENT_CLOCK = _sequencer_alsa.SND_SEQ_EVENT_CLOCK
SND_SEQ_EVENT_TICK = _sequencer_alsa.SND_SEQ_EVENT_TICK
SND_SEQ_EVENT_QUEUE_SKEW = _sequencer_alsa.SND_SEQ_EVENT_QUEUE_SKEW
SND_SEQ_EVENT_SYNC_POS = _sequencer_alsa.SND_SEQ_EVENT_SYNC_POS
SND_SEQ_EVENT_TUNE_REQUEST = _sequencer_alsa.SND_SEQ_EVENT_TUNE_REQUEST
SND_SEQ_EVENT_RESET = _sequencer_alsa.SND_SEQ_EVENT_RESET
SND_SEQ_EVENT_SENSING = _sequencer_alsa.SND_SEQ_EVENT_SENSING
SND_SEQ_EVENT_ECHO = _sequencer_alsa.SND_SEQ_EVENT_ECHO
SND_SEQ_EVENT_OSS = _sequencer_alsa.SND_SEQ_EVENT_OSS
SND_SEQ_EVENT_CLIENT_START = _sequencer_alsa.SND_SEQ_EVENT_CLIENT_START
SND_SEQ_EVENT_CLIENT_EXIT = _sequencer_alsa.SND_SEQ_EVENT_CLIENT_EXIT
SND_SEQ_EVENT_CLIENT_CHANGE = _sequencer_alsa.SND_SEQ_EVENT_CLIENT_CHANGE
SND_SEQ_EVENT_PORT_START = _sequencer_alsa.SND_SEQ_EVENT_PORT_START
SND_SEQ_EVENT_PORT_EXIT = _sequencer_alsa.SND_SEQ_EVENT_PORT_EXIT
SND_SEQ_EVENT_PORT_CHANGE = _sequencer_alsa.SND_SEQ_EVENT_PORT_CHANGE
SND_SEQ_EVENT_PORT_SUBSCRIBED = _sequencer_alsa.SND_SEQ_EVENT_PORT_SUBSCRIBED
SND_SEQ_EVENT_PORT_UNSUBSCRIBED = _sequencer_alsa.SND_SEQ_EVENT_PORT_UNSUBSCRIBED
SND_SEQ_EVENT_USR0 = _sequencer_alsa.SND_SEQ_EVENT_USR0
SND_SEQ_EVENT_USR1 = _sequencer_alsa.SND_SEQ_EVENT_USR1
SND_SEQ_EVENT_USR2 = _sequencer_alsa.SND_SEQ_EVENT_USR2
SND_SEQ_EVENT_USR3 = _sequencer_alsa.SND_SEQ_EVENT_USR3
SND_SEQ_EVENT_USR4 = _sequencer_alsa.SND_SEQ_EVENT_USR4
SND_SEQ_EVENT_USR5 = _sequencer_alsa.SND_SEQ_EVENT_USR5
SND_SEQ_EVENT_USR6 = _sequencer_alsa.SND_SEQ_EVENT_USR6
SND_SEQ_EVENT_USR7 = _sequencer_alsa.SND_SEQ_EVENT_USR7
SND_SEQ_EVENT_USR8 = _sequencer_alsa.SND_SEQ_EVENT_USR8
SND_SEQ_EVENT_USR9 = _sequencer_alsa.SND_SEQ_EVENT_USR9
SND_SEQ_EVENT_SYSEX = _sequencer_alsa.SND_SEQ_EVENT_SYSEX
SND_SEQ_EVENT_BOUNCE = _sequencer_alsa.SND_SEQ_EVENT_BOUNCE
SND_SEQ_EVENT_USR_VAR0 = _sequencer_alsa.SND_SEQ_EVENT_USR_VAR0
SND_SEQ_EVENT_USR_VAR1 = _sequencer_alsa.SND_SEQ_EVENT_USR_VAR1
SND_SEQ_EVENT_USR_VAR2 = _sequencer_alsa.SND_SEQ_EVENT_USR_VAR2
SND_SEQ_EVENT_USR_VAR3 = _sequencer_alsa.SND_SEQ_EVENT_USR_VAR3
SND_SEQ_EVENT_USR_VAR4 = _sequencer_alsa.SND_SEQ_EVENT_USR_VAR4
SND_SEQ_EVENT_NONE = _sequencer_alsa.SND_SEQ_EVENT_NONE
class snd_seq_addr_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    client = property(_sequencer_alsa.snd_seq_addr_t_client_get, _sequencer_alsa.snd_seq_addr_t_client_set)
    port = property(_sequencer_alsa.snd_seq_addr_t_port_get, _sequencer_alsa.snd_seq_addr_t_port_set)

    def __init__(self):
        _sequencer_alsa.snd_seq_addr_t_swiginit(self, _sequencer_alsa.new_snd_seq_addr_t())
    __swig_destroy__ = _sequencer_alsa.delete_snd_seq_addr_t

# Register snd_seq_addr_t in _sequencer_alsa:
_sequencer_alsa.snd_seq_addr_t_swigregister(snd_seq_addr_t)
cvar = _sequencer_alsa.cvar
snd_seq_event_types = cvar.snd_seq_event_types

class snd_seq_connect_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sender = property(_sequencer_alsa.snd_seq_connect_t_sender_get, _sequencer_alsa.snd_seq_connect_t_sender_set)
    dest = property(_sequencer_alsa.snd_seq_connect_t_dest_get, _sequencer_alsa.snd_seq_connect_t_dest_set)

    def __init__(self):
        _sequencer_alsa.snd_seq_connect_t_swiginit(self, _sequencer_alsa.new_snd_seq_connect_t())
    __swig_destroy__ = _sequencer_alsa.delete_snd_seq_connect_t

# Register snd_seq_connect_t in _sequencer_alsa:
_sequencer_alsa.snd_seq_connect_t_swigregister(snd_seq_connect_t)

class snd_seq_real_time_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tv_sec = property(_sequencer_alsa.snd_seq_real_time_t_tv_sec_get, _sequencer_alsa.snd_seq_real_time_t_tv_sec_set)
    tv_nsec = property(_sequencer_alsa.snd_seq_real_time_t_tv_nsec_get, _sequencer_alsa.snd_seq_real_time_t_tv_nsec_set)

    def __init__(self):
        _sequencer_alsa.snd_seq_real_time_t_swiginit(self, _sequencer_alsa.new_snd_seq_real_time_t())
    __swig_destroy__ = _sequencer_alsa.delete_snd_seq_real_time_t

# Register snd_seq_real_time_t in _sequencer_alsa:
_sequencer_alsa.snd_seq_real_time_t_swigregister(snd_seq_real_time_t)

class snd_seq_timestamp_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tick = property(_sequencer_alsa.snd_seq_timestamp_t_tick_get, _sequencer_alsa.snd_seq_timestamp_t_tick_set)
    time = property(_sequencer_alsa.snd_seq_timestamp_t_time_get, _sequencer_alsa.snd_seq_timestamp_t_time_set)

    def __init__(self):
        _sequencer_alsa.snd_seq_timestamp_t_swiginit(self, _sequencer_alsa.new_snd_seq_timestamp_t())
    __swig_destroy__ = _sequencer_alsa.delete_snd_seq_timestamp_t

# Register snd_seq_timestamp_t in _sequencer_alsa:
_sequencer_alsa.snd_seq_timestamp_t_swigregister(snd_seq_timestamp_t)

SND_SEQ_TIME_STAMP_TICK = _sequencer_alsa.SND_SEQ_TIME_STAMP_TICK
SND_SEQ_TIME_STAMP_REAL = _sequencer_alsa.SND_SEQ_TIME_STAMP_REAL
SND_SEQ_TIME_STAMP_MASK = _sequencer_alsa.SND_SEQ_TIME_STAMP_MASK
SND_SEQ_TIME_MODE_ABS = _sequencer_alsa.SND_SEQ_TIME_MODE_ABS
SND_SEQ_TIME_MODE_REL = _sequencer_alsa.SND_SEQ_TIME_MODE_REL
SND_SEQ_TIME_MODE_MASK = _sequencer_alsa.SND_SEQ_TIME_MODE_MASK
SND_SEQ_EVENT_LENGTH_FIXED = _sequencer_alsa.SND_SEQ_EVENT_LENGTH_FIXED
SND_SEQ_EVENT_LENGTH_VARIABLE = _sequencer_alsa.SND_SEQ_EVENT_LENGTH_VARIABLE
SND_SEQ_EVENT_LENGTH_VARUSR = _sequencer_alsa.SND_SEQ_EVENT_LENGTH_VARUSR
SND_SEQ_EVENT_LENGTH_MASK = _sequencer_alsa.SND_SEQ_EVENT_LENGTH_MASK
SND_SEQ_PRIORITY_NORMAL = _sequencer_alsa.SND_SEQ_PRIORITY_NORMAL
SND_SEQ_PRIORITY_HIGH = _sequencer_alsa.SND_SEQ_PRIORITY_HIGH
SND_SEQ_PRIORITY_MASK = _sequencer_alsa.SND_SEQ_PRIORITY_MASK
class snd_seq_ev_note_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channel = property(_sequencer_alsa.snd_seq_ev_note_t_channel_get, _sequencer_alsa.snd_seq_ev_note_t_channel_set)
    note = property(_sequencer_alsa.snd_seq_ev_note_t_note_get, _sequencer_alsa.snd_seq_ev_note_t_note_set)
    velocity = property(_sequencer_alsa.snd_seq_ev_note_t_velocity_get, _sequencer_alsa.snd_seq_ev_note_t_velocity_set)
    off_velocity = property(_sequencer_alsa.snd_seq_ev_note_t_off_velocity_get, _sequencer_alsa.snd_seq_ev_note_t_off_velocity_set)
    duration = property(_sequencer_alsa.snd_seq_ev_note_t_duration_get, _sequencer_alsa.snd_seq_ev_note_t_duration_set)

    def __init__(self):
        _sequencer_alsa.snd_seq_ev_note_t_swiginit(self, _sequencer_alsa.new_snd_seq_ev_note_t())
    __swig_destroy__ = _sequencer_alsa.delete_snd_seq_ev_note_t

# Register snd_seq_ev_note_t in _sequencer_alsa:
_sequencer_alsa.snd_seq_ev_note_t_swigregister(snd_seq_ev_note_t)

class snd_seq_ev_ctrl_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channel = property(_sequencer_alsa.snd_seq_ev_ctrl_t_channel_get, _sequencer_alsa.snd_seq_ev_ctrl_t_channel_set)
    unused = property(_sequencer_alsa.snd_seq_ev_ctrl_t_unused_get, _sequencer_alsa.snd_seq_ev_ctrl_t_unused_set)
    param = property(_sequencer_alsa.snd_seq_ev_ctrl_t_param_get, _sequencer_alsa.snd_seq_ev_ctrl_t_param_set)
    value = property(_sequencer_alsa.snd_seq_ev_ctrl_t_value_get, _sequencer_alsa.snd_seq_ev_ctrl_t_value_set)

    def __init__(self):
        _sequencer_alsa.snd_seq_ev_ctrl_t_swiginit(self, _sequencer_alsa.new_snd_seq_ev_ctrl_t())
    __swig_destroy__ = _sequencer_alsa.delete_snd_seq_ev_ctrl_t

# Register snd_seq_ev_ctrl_t in _sequencer_alsa:
_sequencer_alsa.snd_seq_ev_ctrl_t_swigregister(snd_seq_ev_ctrl_t)

class snd_seq_ev_raw8_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    d = property(_sequencer_alsa.snd_seq_ev_raw8_t_d_get, _sequencer_alsa.snd_seq_ev_raw8_t_d_set)

    def __init__(self):
        _sequencer_alsa.snd_seq_ev_raw8_t_swiginit(self, _sequencer_alsa.new_snd_seq_ev_raw8_t())
    __swig_destroy__ = _sequencer_alsa.delete_snd_seq_ev_raw8_t

# Register snd_seq_ev_raw8_t in _sequencer_alsa:
_sequencer_alsa.snd_seq_ev_raw8_t_swigregister(snd_seq_ev_raw8_t)

class snd_seq_ev_raw32_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    d = property(_sequencer_alsa.snd_seq_ev_raw32_t_d_get, _sequencer_alsa.snd_seq_ev_raw32_t_d_set)

    def __init__(self):
        _sequencer_alsa.snd_seq_ev_raw32_t_swiginit(self, _sequencer_alsa.new_snd_seq_ev_raw32_t())
    __swig_destroy__ = _sequencer_alsa.delete_snd_seq_ev_raw32_t

# Register snd_seq_ev_raw32_t in _sequencer_alsa:
_sequencer_alsa.snd_seq_ev_raw32_t_swigregister(snd_seq_ev_raw32_t)

class snd_seq_ev_ext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    len = property(_sequencer_alsa.snd_seq_ev_ext_len_get, _sequencer_alsa.snd_seq_ev_ext_len_set)
    ptr = property(_sequencer_alsa.snd_seq_ev_ext_ptr_get, _sequencer_alsa.snd_seq_ev_ext_ptr_set)

    def __init__(self):
        _sequencer_alsa.snd_seq_ev_ext_swiginit(self, _sequencer_alsa.new_snd_seq_ev_ext())
    __swig_destroy__ = _sequencer_alsa.delete_snd_seq_ev_ext

# Register snd_seq_ev_ext in _sequencer_alsa:
_sequencer_alsa.snd_seq_ev_ext_swigregister(snd_seq_ev_ext)

class snd_seq_result_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    event = property(_sequencer_alsa.snd_seq_result_t_event_get, _sequencer_alsa.snd_seq_result_t_event_set)
    result = property(_sequencer_alsa.snd_seq_result_t_result_get, _sequencer_alsa.snd_seq_result_t_result_set)

    def __init__(self):
        _sequencer_alsa.snd_seq_result_t_swiginit(self, _sequencer_alsa.new_snd_seq_result_t())
    __swig_destroy__ = _sequencer_alsa.delete_snd_seq_result_t

# Register snd_seq_result_t in _sequencer_alsa:
_sequencer_alsa.snd_seq_result_t_swigregister(snd_seq_result_t)

class snd_seq_queue_skew_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value = property(_sequencer_alsa.snd_seq_queue_skew_t_value_get, _sequencer_alsa.snd_seq_queue_skew_t_value_set)
    base = property(_sequencer_alsa.snd_seq_queue_skew_t_base_get, _sequencer_alsa.snd_seq_queue_skew_t_base_set)

    def __init__(self):
        _sequencer_alsa.snd_seq_queue_skew_t_swiginit(self, _sequencer_alsa.new_snd_seq_queue_skew_t())
    __swig_destroy__ = _sequencer_alsa.delete_snd_seq_queue_skew_t

# Register snd_seq_queue_skew_t in _sequencer_alsa:
_sequencer_alsa.snd_seq_queue_skew_t_swigregister(snd_seq_queue_skew_t)

class snd_seq_ev_queue_control_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    queue = property(_sequencer_alsa.snd_seq_ev_queue_control_t_queue_get, _sequencer_alsa.snd_seq_ev_queue_control_t_queue_set)
    unused = property(_sequencer_alsa.snd_seq_ev_queue_control_t_unused_get, _sequencer_alsa.snd_seq_ev_queue_control_t_unused_set)
    param = property(_sequencer_alsa.snd_seq_ev_queue_control_t_param_get)

    def __init__(self):
        _sequencer_alsa.snd_seq_ev_queue_control_t_swiginit(self, _sequencer_alsa.new_snd_seq_ev_queue_control_t())
    __swig_destroy__ = _sequencer_alsa.delete_snd_seq_ev_queue_control_t

# Register snd_seq_ev_queue_control_t in _sequencer_alsa:
_sequencer_alsa.snd_seq_ev_queue_control_t_swigregister(snd_seq_ev_queue_control_t)

class snd_seq_ev_queue_control_param(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value = property(_sequencer_alsa.snd_seq_ev_queue_control_param_value_get, _sequencer_alsa.snd_seq_ev_queue_control_param_value_set)
    time = property(_sequencer_alsa.snd_seq_ev_queue_control_param_time_get, _sequencer_alsa.snd_seq_ev_queue_control_param_time_set)
    position = property(_sequencer_alsa.snd_seq_ev_queue_control_param_position_get, _sequencer_alsa.snd_seq_ev_queue_control_param_position_set)
    skew = property(_sequencer_alsa.snd_seq_ev_queue_control_param_skew_get, _sequencer_alsa.snd_seq_ev_queue_control_param_skew_set)
    d32 = property(_sequencer_alsa.snd_seq_ev_queue_control_param_d32_get, _sequencer_alsa.snd_seq_ev_queue_control_param_d32_set)
    d8 = property(_sequencer_alsa.snd_seq_ev_queue_control_param_d8_get, _sequencer_alsa.snd_seq_ev_queue_control_param_d8_set)

    def __init__(self):
        _sequencer_alsa.snd_seq_ev_queue_control_param_swiginit(self, _sequencer_alsa.new_snd_seq_ev_queue_control_param())
    __swig_destroy__ = _sequencer_alsa.delete_snd_seq_ev_queue_control_param

# Register snd_seq_ev_queue_control_param in _sequencer_alsa:
_sequencer_alsa.snd_seq_ev_queue_control_param_swigregister(snd_seq_ev_queue_control_param)

class snd_seq_event_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_sequencer_alsa.snd_seq_event_t_type_get, _sequencer_alsa.snd_seq_event_t_type_set)
    flags = property(_sequencer_alsa.snd_seq_event_t_flags_get, _sequencer_alsa.snd_seq_event_t_flags_set)
    tag = property(_sequencer_alsa.snd_seq_event_t_tag_get, _sequencer_alsa.snd_seq_event_t_tag_set)
    queue = property(_sequencer_alsa.snd_seq_event_t_queue_get, _sequencer_alsa.snd_seq_event_t_queue_set)
    time = property(_sequencer_alsa.snd_seq_event_t_time_get, _sequencer_alsa.snd_seq_event_t_time_set)
    source = property(_sequencer_alsa.snd_seq_event_t_source_get, _sequencer_alsa.snd_seq_event_t_source_set)
    dest = property(_sequencer_alsa.snd_seq_event_t_dest_get, _sequencer_alsa.snd_seq_event_t_dest_set)
    data = property(_sequencer_alsa.snd_seq_event_t_data_get)

    def __init__(self):
        _sequencer_alsa.snd_seq_event_t_swiginit(self, _sequencer_alsa.new_snd_seq_event_t())
    __swig_destroy__ = _sequencer_alsa.delete_snd_seq_event_t

# Register snd_seq_event_t in _sequencer_alsa:
_sequencer_alsa.snd_seq_event_t_swigregister(snd_seq_event_t)

class snd_seq_event_data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    note = property(_sequencer_alsa.snd_seq_event_data_note_get, _sequencer_alsa.snd_seq_event_data_note_set)
    control = property(_sequencer_alsa.snd_seq_event_data_control_get, _sequencer_alsa.snd_seq_event_data_control_set)
    raw8 = property(_sequencer_alsa.snd_seq_event_data_raw8_get, _sequencer_alsa.snd_seq_event_data_raw8_set)
    raw32 = property(_sequencer_alsa.snd_seq_event_data_raw32_get, _sequencer_alsa.snd_seq_event_data_raw32_set)
    ext = property(_sequencer_alsa.snd_seq_event_data_ext_get, _sequencer_alsa.snd_seq_event_data_ext_set)
    queue = property(_sequencer_alsa.snd_seq_event_data_queue_get, _sequencer_alsa.snd_seq_event_data_queue_set)
    time = property(_sequencer_alsa.snd_seq_event_data_time_get, _sequencer_alsa.snd_seq_event_data_time_set)
    addr = property(_sequencer_alsa.snd_seq_event_data_addr_get, _sequencer_alsa.snd_seq_event_data_addr_set)
    connect = property(_sequencer_alsa.snd_seq_event_data_connect_get, _sequencer_alsa.snd_seq_event_data_connect_set)
    result = property(_sequencer_alsa.snd_seq_event_data_result_get, _sequencer_alsa.snd_seq_event_data_result_set)

    def __init__(self):
        _sequencer_alsa.snd_seq_event_data_swiginit(self, _sequencer_alsa.new_snd_seq_event_data())
    __swig_destroy__ = _sequencer_alsa.delete_snd_seq_event_data

# Register snd_seq_event_data in _sequencer_alsa:
_sequencer_alsa.snd_seq_event_data_swigregister(snd_seq_event_data)


def snd_midi_event_new(bufsize, rdev):
    return _sequencer_alsa.snd_midi_event_new(bufsize, rdev)

def snd_midi_event_resize_buffer(dev, bufsize):
    return _sequencer_alsa.snd_midi_event_resize_buffer(dev, bufsize)

def snd_midi_event_free(dev):
    return _sequencer_alsa.snd_midi_event_free(dev)

def snd_midi_event_init(dev):
    return _sequencer_alsa.snd_midi_event_init(dev)

def snd_midi_event_reset_encode(dev):
    return _sequencer_alsa.snd_midi_event_reset_encode(dev)

def snd_midi_event_reset_decode(dev):
    return _sequencer_alsa.snd_midi_event_reset_decode(dev)

def snd_midi_event_no_status(dev, on):
    return _sequencer_alsa.snd_midi_event_no_status(dev, on)

def snd_midi_event_encode(dev, buf, count, ev):
    return _sequencer_alsa.snd_midi_event_encode(dev, buf, count, ev)

def snd_midi_event_encode_byte(dev, c, ev):
    return _sequencer_alsa.snd_midi_event_encode_byte(dev, c, ev)

def snd_midi_event_decode(dev, buf, count, ev):
    return _sequencer_alsa.snd_midi_event_decode(dev, buf, count, ev)
SND_ERROR_BEGIN = _sequencer_alsa.SND_ERROR_BEGIN
SND_ERROR_INCOMPATIBLE_VERSION = _sequencer_alsa.SND_ERROR_INCOMPATIBLE_VERSION
SND_ERROR_ALISP_NIL = _sequencer_alsa.SND_ERROR_ALISP_NIL

def snd_strerror(errnum):
    return _sequencer_alsa.snd_strerror(errnum)

def snd_lib_error_set_handler(handler):
    return _sequencer_alsa.snd_lib_error_set_handler(handler)

def snd_lib_error_set_local(func):
    return _sequencer_alsa.snd_lib_error_set_local(func)


